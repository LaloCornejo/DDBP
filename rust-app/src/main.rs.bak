use actix_web::{App, HttpResponse, HttpServer, Responder, Result, web, error::ResponseError};
use mongodb::{
    Client, 
    bson::{Document, doc},
    options::{ClientOptions, ResolverConfig}
};
use serde::{Deserialize, Serialize};
use std::env;
use std::fmt;
use std::time::Duration;
use uuid::Uuid;
use chrono::Utc;
use dotenv::dotenv;
use futures_util::StreamExt;
use num_cpus;

use tracing::{Level, error, info, warn, debug};
use tracing_subscriber;
#[derive(Serialize, Deserialize, Debug)]
struct User {
    username: String,
    email: String,
    password_hash: String,
}

#[derive(Serialize, Deserialize, Debug)]
struct Post {
    user_id: String,
    content: String,
}

#[derive(Serialize, Deserialize, Debug)]
struct Comment {
    post_id: String,
    user_id: String,
    content: String,
}

#[derive(Serialize, Deserialize, Debug)]
struct Follow {
    follower_id: String,
    following_id: String,
}
#[derive(Serialize, Deserialize, Debug)]
struct Response<T = String> {
    status: String,
    message: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    data: Option<T>,
}

// Custom error enum for the application
#[derive(Debug)]
enum AppError {
    MongoError(mongodb::error::Error),
    NotFound(String),
    InvalidInput(String),
    InternalError(String),
}

impl fmt::Display for AppError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            AppError::MongoError(e) => write!(f, "Database error: {}", e),
            AppError::NotFound(msg) => write!(f, "Not found: {}", msg),
            AppError::InvalidInput(msg) => write!(f, "Invalid input: {}", msg),
            AppError::InternalError(msg) => write!(f, "Internal error: {}", msg),
        }
    }
}

impl ResponseError for AppError {
    fn error_response(&self) -> HttpResponse {
        match self {
            AppError::MongoError(e) => {
                error!("Database error: {}", e);
                HttpResponse::InternalServerError().json(Response::<()> {
                    status: "error".to_string(),
                    message: "A database error occurred".to_string(),
                    data: None,
                })
            },
            AppError::NotFound(msg) => {
                info!("Not found: {}", msg);
                HttpResponse::NotFound().json(Response::<()> {
                    status: "error".to_string(),
                    message: msg.clone(),
                    data: None,
                })
            },
            AppError::InvalidInput(msg) => {
                info!("Invalid input: {}", msg);
                HttpResponse::BadRequest().json(Response::<()> {
                    status: "error".to_string(),
                    message: msg.clone(),
                    data: None,
                })
            },
            AppError::InternalError(msg) => {
                error!("Internal error: {}", msg);
                HttpResponse::InternalServerError().json(Response::<()> {
                    status: "error".to_string(),
                    message: "An internal error occurred".to_string(),
                    data: None,
                })
            }
        }
    }
}

impl From<mongodb::error::Error> for AppError {
    fn from(error: mongodb::error::Error) -> Self {
        AppError::MongoError(error)
    }
}

// Application state to be shared across handlers
struct AppState {
    db: mongodb::Database,
}
#[actix_web::main]
async fn main() -> std::io::Result<()> {
    // Load environment variables from .env file if present
    dotenv().ok();
    
    // Initialize the logger
    tracing_subscriber::fmt()
        .with_max_level(Level::INFO)
        .init();
    
    info!("Starting social media API application");
    
    // Get MongoDB connection string from environment variable or use default
    let mongo_uri = env::var("MONGO_URI")
        .unwrap_or_else(|_| {
            warn!("MONGO_URI environment variable not set, using default value");
            "mongodb://admin:password@localhost:27017/?replicaSet=rs0".to_string()
        });
    
    info!("Connecting to MongoDB at: {}", mongo_uri.replace("admin:password", "admin:****"));
    
    // Configure MongoDB client options
    let mut client_options = match ClientOptions::parse_with_resolver_config(&mongo_uri, ResolverConfig::cloudflare()).await {
        Ok(options) => {
            info!("MongoDB connection string parsed successfully");
            options
        },
        Err(e) => {
            error!("Failed to parse MongoDB connection string: {}", e);
            panic!("Cannot start application without database connection");
        }
    };
    
    // Set MongoDB client timeout options
    client_options.connect_timeout = Some(Duration::from_secs(30));
    client_options.server_selection_timeout = Some(Duration::from_secs(30));
    client_options.app_name = Some("social_media_api".to_string());
    
    // Create MongoDB client
    let client = match Client::with_options(client_options) {
        Ok(client) => {
            info!("Successfully created MongoDB client");
            client
        }
        Err(e) => {
            error!("Failed to create MongoDB client: {}", e);
            panic!("Cannot start application without database connection");
        }
    };
    
    // Test MongoDB connection with ping
    info!("Testing MongoDB connection with ping...");
    let ping_result = tokio::time::timeout(
        Duration::from_secs(10),
        client.database("admin").run_command(doc! {"ping": 1}, None)
    ).await;
    
    // Handle ping result
    match ping_result {
        Ok(Ok(_)) => info!("Successfully connected to MongoDB replica set"),
        Ok(Err(e)) => {
            error!("Failed to ping MongoDB: {}", e);
            info!("Waiting for 5 seconds before retrying...");
            tokio::time::sleep(Duration::from_secs(5)).await;
            
            // Try a second time
            info!("Attempting second ping with timeout...");
            match tokio::time::timeout(
                Duration::from_secs(10),
                client.database("admin").run_command(doc! {"ping": 1}, None)
            ).await {
                Ok(Ok(_)) => info!("Second ping attempt successful!"),
                Ok(Err(e2)) => {
                    error!("Second ping attempt also failed: {}", e2);
                    warn!("Will continue despite connection issues");
                },
                Err(_) => {
                    error!("Second ping attempt timed out after 10 seconds");
                    warn!("Will continue despite timeout");
                }
            }
        },
        Err(_) => {
            error!("Ping operation timed out after 10 seconds");
            warn!("Will continue despite timeout");
        }
    };
    
    // Access the database and verify we can list collections
    let db = client.database("social_media_db");
    
    info!("Testing access to social_media_db...");
    match db.list_collection_names(None).await {
        Ok(collections) => info!(
            "Successfully accessed social_media_db. Collections: {:?}",
            collections
        ),
        Err(e) => {
            warn!("Failed to list collections in social_media_db: {}", e);
            info!("Will attempt to create collections on first use");
        }
    }
    
    // Create app state with database reference
    let app_state = web::Data::new(AppState { db });
    
    // Get host and port from environment or use defaults
    let host = env::var("HOST").unwrap_or_else(|_| "0.0.0.0".to_string());
    let port = env::var("PORT").unwrap_or_else(|_| "8000".to_string());
    let bind_address = format!("{}:{}", host, port);
    
    info!("Server starting at http://{}", bind_address);
    
    // Configure and start HTTP server
    HttpServer::new(move || {
        App::new()
            .app_data(app_state.clone())
            .route("/create_user", web::post().to(create_user_handler))
            .route("/create_post", web::post().to(create_post_handler))
            .route("/create_comment", web::post().to(create_comment_handler))
            .route("/follow_user", web::post().to(follow_user_handler))
            .route("/get_post/{id}", web::get().to(get_post_handler))
            .route("/health", web::get().to(health_check_handler))
    })
    .bind(&bind_address)?
    .workers(num_cpus::get()) // Use optimal number of workers based on available CPUs
    .shutdown_timeout(30) // Set shutdown timeout to 30 seconds
    .run()
    .await
}
async fn create_user_handler(
    user: web::Json<User>,
    state: web::Data<AppState>,
) -> Result<impl Responder, AppError> {
    info!("Creating new user with username: {}", user.username);
    
    // Validate user input
    if user.username.is_empty() {
        return Err(AppError::InvalidInput("Username cannot be empty".to_string()));
    }
    
    if user.email.is_empty() || !user.email.contains('@') {
        return Err(AppError::InvalidInput("Invalid email format".to_string()));
    }
    
    if user.password_hash.is_empty() {
        return Err(AppError::InvalidInput("Password hash cannot be empty".to_string()));
    }
    
    let collection = state.db.collection::<Document>("users");
    
    // Check if user with this email already exists
    let existing_filter = doc! { "email": &user.email };
    if let Ok(Some(_)) = collection.find_one(existing_filter, None).await {
        return Err(AppError::InvalidInput(format!("User with email {} already exists", user.email)));
    }

    let user_id = Uuid::new_v4().to_string();
    let user_doc = doc! {
        "_id": &user_id,
        "username": &user.username,
        "email": &user.email,
        "password_hash": &user.password_hash,
        "created_at": chrono::Utc::now().to_rfc3339()
    };

    match collection.insert_one(user_doc, None).await {
        Ok(_) => {
            info!("User created successfully with ID: {}", user_id);
            Ok(HttpResponse::Created().json(Response {
                status: "success".to_string(),
                message: format!("User created successfully with ID: {}", user_id),
                data: Some(user_id),
            }))
        },
        Err(e) => {
            error!("Error creating user: {}", e);
            Err(AppError::from(e))
        }
    }
}
async fn create_post_handler(
    post: web::Json<Post>,
    state: web::Data<AppState>,
) -> Result<impl Responder, AppError> {
    info!("Creating new post for user: {}", post.user_id);
    
    // Validate post input
    if post.user_id.is_empty() {
        return Err(AppError::InvalidInput("User ID cannot be empty".to_string()));
    }
    
    if post.content.is_empty() {
        return Err(AppError::InvalidInput("Post content cannot be empty".to_string()));
    }
    
    // Verify user exists
    let users_collection = state.db.collection::<Document>("users");
    let user_filter = doc! { "_id": &post.user_id };
    
    if let Ok(None) = users_collection.find_one(user_filter, None).await {
        return Err(AppError::NotFound(format!("User with ID {} not found", post.user_id)));
    }
    
    let collection = state.db.collection::<Document>("posts");

    let post_id = Uuid::new_v4().to_string();
    let post_doc = doc! {
        "_id": &post_id,
        "user_id": &post.user_id,
        "content": &post.content,
        "created_at": chrono::Utc::now().to_rfc3339()
    };

    match collection.insert_one(post_doc, None).await {
        Ok(_) => {
            info!("Post created successfully with ID: {}", post_id);
            Ok(HttpResponse::Created().json(Response {
                status: "success".to_string(),
                message: format!("Post created successfully with ID: {}", post_id),
                data: Some(post_id),
            }))
        },
        Err(e) => {
            error!("Error creating post: {}", e);
            Err(AppError::from(e))
        }
    }
}
async fn create_comment_handler(
    comment: web::Json<Comment>,
    state: web::Data<AppState>,
) -> Result<impl Responder, AppError> {
    info!("Creating new comment on post: {} by user: {}", comment.post_id, comment.user_id);
    
    // Validate comment input
    if comment.post_id.is_empty() {
        return Err(AppError::InvalidInput("Post ID cannot be empty".to_string()));
    }
    
    if comment.user_id.is_empty() {
        return Err(AppError::InvalidInput("User ID cannot be empty".to_string()));
    }
    
    if comment.content.is_empty() {
        return Err(AppError::InvalidInput("Comment content cannot be empty".to_string()));
    }
    
    // Verify post exists
    let posts_collection = state.db.collection::<Document>("posts");
    let post_filter = doc! { "_id": &comment.post_id };
    
    if let Ok(None) = posts_collection.find_one(post_filter, None).await {
        return Err(AppError::NotFound(format!("Post with ID {} not found", comment.post_id)));
    }
    
    // Verify user exists
    let users_collection = state.db.collection::<Document>("users");
    let user_filter = doc! { "_id": &comment.user_id };
    
    if let Ok(None) = users_collection.find_one(user_filter, None).await {
        return Err(AppError::NotFound(format!("User with ID {} not found", comment.user_id)));
    }
    
    let collection = state.db.collection::<Document>("comments");

    let comment_id = Uuid::new_v4().to_string();
    let comment_doc = doc! {
        "_id": &comment_id,
        "post_id": &comment.post_id,
        "user_id": &comment.user_id,
        "content": &comment.content,
        "created_at": chrono::Utc::now().to_rfc3339()
    };

    match collection.insert_one(comment_doc, None).await {
        Ok(_) => {
            info!("Comment created successfully with ID: {}", comment_id);
            Ok(HttpResponse::Created().json(Response {
                status: "success".to_string(),
                message: format!("Comment created successfully with ID: {}", comment_id),
                data: Some(comment_id),
            }))
        },
        Err(e) => {
            error!("Error creating comment: {}", e);
            Err(AppError::from(e))
        }
    }
}

async fn follow_user_handler(
    follow: web::Json<Follow>,
    state: web::Data<AppState>,
) -> Result<impl Responder, AppError> {
    info!("Recording follow action: {} is following {}", follow.follower_id, follow.following_id);
    
    // Validate follow input
    if follow.follower_id.is_empty() {
        return Err(AppError::InvalidInput("Follower ID cannot be empty".to_string()));
    }
    
    if follow.following_id.is_empty() {
        return Err(AppError::InvalidInput("Following ID cannot be empty".to_string()));
    }
    
    if follow.follower_id == follow.following_id {
        return Err(AppError::InvalidInput("Users cannot follow themselves".to_string()));
    }
    
    // Verify both users exist
    let users_collection = state.db.collection::<Document>("users");
    
    // Check follower exists
    let follower_filter = doc! { "_id": &follow.follower_id };
    if let Ok(None) = users_collection.find_one(follower_filter, None).await {
        return Err(AppError::NotFound(format!("Follower with ID {} not found", follow.follower_id)));
    }
    
    // Check following user exists
    let following_filter = doc! { "_id": &follow.following_id };
    if let Ok(None) = users_collection.find_one(following_filter, None).await {
        return Err(AppError::NotFound(format!("User to follow with ID {} not found", follow.following_id)));
    }
    
    // Check if already following
    let follows_collection = state.db.collection::<Document>("follows");
    let existing_follow_filter = doc! { 
        "follower_id": &follow.follower_id, 
        "following_id": &follow.following_id 
    };
    
    if let Ok(Some(_)) = follows_collection.find_one(existing_follow_filter, None).await {
        return Err(AppError::InvalidInput(format!(
            "User {} already follows user {}", 
            follow.follower_id, 
            follow.following_id
        )));
    }
    
    let follow_doc = doc! {
        "follower_id": &follow.follower_id,
        "following_id": &follow.following_id,
        "created_at": chrono::Utc::now().to_rfc3339()
    };

    match follows_collection.insert_one(follow_doc, None).await {
        Ok(_) => {
            info!("Follow action recorded successfully");
            Ok(HttpResponse::Created().json(Response::<()> {
                status: "success".to_string(),
                message: "Follow action recorded successfully".to_string(),
                data: None,
            }))
        },
        Err(e) => {
            error!("Error recording follow action: {}", e);
            Err(AppError::from(e))
        }
    }
}
async fn get_post_handler(
    path: web::Path<String>,
    state: web::Data<AppState>,
) -> Result<impl Responder, AppError> {
    let id = path.into_inner();
    info!("Retrieving post with ID: {}", id);
    
    // Validate post ID
    if id.is_empty() {
        return Err(AppError::InvalidInput("Post ID cannot be empty".to_string()));
    }
    
    // Check if ID follows UUID format
    if uuid::Uuid::parse_str(&id).is_err() {
        return Err(AppError::InvalidInput(format!("Invalid post ID format: {}", id)));
    }
    
    let posts_collection = state.db.collection::<Document>("posts");
    let filter = doc! { "_id": id.clone() };
    
    match posts_collection.find_one(filter, None).await {
        Ok(Some(post_doc)) => {
            // Extract post data with proper error handling
            let created_at = match post_doc.get_str("created_at") {
                Ok(val) => val.to_string(),
                Err(_) => {
                    warn!("Missing created_at field in post {}", id);
                    Utc::now().to_rfc3339()
                }
            };
            
            let user_id = match post_doc.get_str("user_id") {
                Ok(val) => val.to_string(),
                Err(_) => {
                    warn!("Missing user_id field in post {}", id);
                    "unknown".to_string()
                }
            };
            
            let content = match post_doc.get_str("content") {
                Ok(val) => val.to_string(),
                Err(_) => {
                    warn!("Missing content field in post {}", id);
                    "".to_string()
                }
            };
            
            info!("Post found: ID {} by user {}", id, user_id);
            
            // Define post response structure
            #[derive(Serialize)]
            struct PostResponse {
                id: String,
                user_id: String,
                content: String,
                created_at: String,
            }
            
            let post_response = PostResponse {
                id: id.clone(),
                user_id,
                content,
                created_at,
            };
            
            // Fetch comments for this post
            let comments_collection = state.db.collection::<Document>("comments");
            let comments_filter = doc! { "post_id": id.clone() };
            
            #[derive(Serialize)]
            struct CommentResponse {
                id: String,
                user_id: String,
                content: String,
                created_at: String,
            }
            
            #[derive(Serialize)]
            struct PostWithComments {
                post: PostResponse,
                comments: Vec<CommentResponse>,
            }
            
            let mut comments = Vec::new();
            
            // Attempt to fetch comments, but don't fail if we can't get them
            if let Ok(mut cursor) = comments_collection.find(comments_filter, None).await {
                while let Some(comment_doc_result) = cursor.next().await {
                    if let Ok(comment_doc) = comment_doc_result {
                        let comment_id = comment_doc.get_str("_id").unwrap_or_default().to_string();
                        let comment_user_id = comment_doc.get_str("user_id").unwrap_or_default().to_string();
                        let comment_content = comment_doc.get_str("content").unwrap_or_default().to_string();
                        let comment_created_at = comment_doc.get_str("created_at").unwrap_or_default().to_string();
                        
                        comments.push(CommentResponse {
                            id: comment_id,
                            user_id: comment_user_id,
                            content: comment_content,
                            created_at: comment_created_at,
                        });
                    }
                }
                debug!("Fetched {} comments for post {}", comments.len(), id);
            } else {
                warn!("Failed to fetch comments for post {}", id);
            }
            // Create the complete response with post and comments
            let full_response = PostWithComments {
                post: post_response,
                comments,
            };
            
            Ok(HttpResponse::Ok().json(Response {
                status: "success".to_string(),
                message: "Post retrieved successfully".to_string(),
                data: Some(full_response),
            }))
        },
        Ok(None) => {
            info!("Post not found with ID: {}", id);
            Err(AppError::NotFound(format!("Post with ID {} not found", id)))
        },
        Err(e) => {
            error!("Error retrieving post: {}", e);
            Err(AppError::from(e))
        }
    }
}

// Health check endpoint with detailed logging
async fn health_check_handler(state: web::Data<AppState>) -> Result<impl Responder, AppError> {
    info!("Health check requested");
    
    let timeout_future = tokio::time::timeout(
        Duration::from_secs(5),
        state.db.run_command(doc! {"ping": 1}, None)
    ).await;
    
    match timeout_future {
        Ok(Ok(_)) => {
            info!("Health check successful");
            Ok(HttpResponse::Ok().json(Response::<()> {
                status: "success".to_string(),
                message: "Service is healthy".to_string(),
                data: None,
            }))
        },
        Ok(Err(e)) => {
            error!("Health check failed: {}", e);
            // Return a service unavailable response but with our standard error format
            Ok(HttpResponse::ServiceUnavailable().json(Response::<()> {
                status: "error".to_string(),
                message: format!("Service is unhealthy: database connection failed"),
                data: None, 
            }))
        },
        Err(_) => {
            error!("Health check timed out after 5 seconds");
            Ok(HttpResponse::ServiceUnavailable().json(Response::<()> {
                status: "error".to_string(),
                message: "Service is unhealthy: database connection timeout".to_string(),
                data: None,
            }))
        }
    }
}
